{"ast":null,"code":"import { FETCH_ALL, UPDATE, CREATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING } from \"../constants/actionTypes\";\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isLoading: true,\n    posts: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case END_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload\n      };\n    // case FETCH_POST:\n    //   return { ...state, post: action.payload.post };\n\n    case LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n} // export default function reducer(posts = [], action) {\n//   console.log(\"reducers/posts.js\");\n//   switch (action.type) {\n//     case DELETE:\n//       return posts.filter((post) => post._id !== action.payload);\n//     case CREATE:\n//       return [...posts, action.payload];\n//     case FETCH_ALL:\n//       return action.payload;\n//     case FETCH_BY_SEARCH:\n//       return action.payload;\n//     case UPDATE:\n//       return posts.map((post) =>\n//         post._id === action.payload._id ? action.payload : post\n//       );\n//     case LIKE:\n//       return posts.map((post) =>\n//         post._id === action.payload._id ? action.payload : post\n//       );\n//     default:\n//       return posts;\n//   }\n// }","map":{"version":3,"sources":["C:/Users/User/web/MERN/client/src/reducers/posts.js"],"names":["FETCH_ALL","UPDATE","CREATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","reducer","state","isLoading","posts","action","type","payload","data","currentPage","numberOfPages","map","post","_id","filter"],"mappings":"AAAA,SACEA,SADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,IALF,EAMEC,eANF,EAOEC,aAPF,EAQEC,WARF,QASO,0BATP;AAUA,eAAe,SAASC,OAAT,GAGb;AAAA,MAFAC,KAEA,uEAFQ;AAAEC,IAAAA,SAAS,EAAE,IAAb;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAER;AAAA,MADAC,MACA;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKH,WAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKV,SAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAGLC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,aAAa,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJzB,OAAP;;AAMF,SAAKZ,eAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAYE,QAAAA,KAAK,EAAEC,MAAM,CAACE;AAA1B,OAAP;AACF;AACA;;AACA,SAAKV,IAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYO,GAAZ,CAAiBC,IAAD,IACrBA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDK,IAD9C;AAFF,OAAP;;AAMF,SAAKjB,MAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYE,QAAAA,KAAK,EAAE,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBC,MAAM,CAACE,OAAxB;AAAnB,OAAP;;AACF,SAAKb,MAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYO,GAAZ,CAAiBC,IAAD,IACrBA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDK,IAD9C;AAFF,OAAP;;AAMF,SAAKhB,MAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYU,MAAZ,CAAoBF,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACE,OAAjD;AAFF,OAAP;;AAIF;AACE,aAAOL,KAAP;AAtCJ;AAwCD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\r\n  FETCH_ALL,\r\n  UPDATE,\r\n  CREATE,\r\n  DELETE,\r\n  LIKE,\r\n  FETCH_BY_SEARCH,\r\n  START_LOADING,\r\n  END_LOADING,\r\n} from \"../constants/actionTypes\";\r\nexport default function reducer(\r\n  state = { isLoading: true, posts: [] },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case START_LOADING:\r\n      return { ...state, isLoading: true };\r\n    case END_LOADING:\r\n      return { ...state, isLoading: false };\r\n    case FETCH_ALL:\r\n      return {\r\n        ...state,\r\n        posts: action.payload.data,\r\n        currentPage: action.payload.currentPage,\r\n        numberOfPages: action.payload.numberOfPages,\r\n      };\r\n    case FETCH_BY_SEARCH:\r\n      return { ...state, posts: action.payload };\r\n    // case FETCH_POST:\r\n    //   return { ...state, post: action.payload.post };\r\n    case LIKE:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) =>\r\n          post._id === action.payload._id ? action.payload : post\r\n        ),\r\n      };\r\n    case CREATE:\r\n      return { ...state, posts: [...state.posts, action.payload] };\r\n    case UPDATE:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) =>\r\n          post._id === action.payload._id ? action.payload : post\r\n        ),\r\n      };\r\n    case DELETE:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((post) => post._id !== action.payload),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// export default function reducer(posts = [], action) {\r\n//   console.log(\"reducers/posts.js\");\r\n//   switch (action.type) {\r\n//     case DELETE:\r\n//       return posts.filter((post) => post._id !== action.payload);\r\n//     case CREATE:\r\n//       return [...posts, action.payload];\r\n//     case FETCH_ALL:\r\n//       return action.payload;\r\n//     case FETCH_BY_SEARCH:\r\n//       return action.payload;\r\n//     case UPDATE:\r\n//       return posts.map((post) =>\r\n//         post._id === action.payload._id ? action.payload : post\r\n//       );\r\n//     case LIKE:\r\n//       return posts.map((post) =>\r\n//         post._id === action.payload._id ? action.payload : post\r\n//       );\r\n//     default:\r\n//       return posts;\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}