{"ast":null,"code":"import * as api from \"../api\";\nimport { FETCH_ALL, UPDATE, CREATE, DELETE, LIKE, FETCH_BY_SEARCH, START_LOADING, END_LOADING } from \"../constants/actionTypes\";\nexport const getPosts = page => async dispatch => {\n  console.log(\"actions/posts.js: getPosts()\");\n\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  console.log(\"actions/posts.js: createPost()\");\n  dispatch({\n    type: START_LOADING\n  });\n\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/User/web/MERN/client/src/actions/posts.js"],"names":["api","FETCH_ALL","UPDATE","CREATE","DELETE","LIKE","FETCH_BY_SEARCH","START_LOADING","END_LOADING","getPosts","page","dispatch","console","log","type","data","fetchPosts","payload","error","message","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","deletePost","e","likePost"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SACEC,SADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,IALF,EAMEC,eANF,EAOEC,aAPF,EAQEC,WARF,QASO,0BATP;AAUA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACpDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AACA,MAAI;AACFF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAACgB,UAAJ,CAAeN,IAAf,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEb,SAAR;AAAmBgB,MAAAA,OAAO,EAAEF;AAA5B,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOU,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAK,CAACC,OAAlB;AACD;AACF,CAVM;AAWP,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,IAAiB,MAAOV,QAAP,IAAoB;AACnE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP;AAAR,KAAD,CAAR;AACA,UAAM;AACJQ,MAAAA,IAAI,EAAE;AAAEA,QAAAA;AAAF;AADF,QAEF,MAAMf,GAAG,CAACsB,kBAAJ,CAAuBD,WAAvB,CAFV;AAGAV,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,eAAR;AAAyBW,MAAAA,OAAO,EAAEF;AAAlC,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GAPD,CAOE,OAAOU,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAK,CAACC,OAAlB;AACD;AACF,CAXM;AAYP,OAAO,MAAMI,UAAU,GAAIC,IAAD,IAAU,MAAOb,QAAP,IAAoB;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAF,EAAAA,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEP;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAACuB,UAAJ,CAAeC,IAAf,CAAvB;AAEAb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEX,MAAR;AAAgBc,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AACD,GALD,CAKE,OAAOU,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAK,CAACC,OAAlB;AACD;AACF,CAXM;AAYP,OAAO,MAAMM,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOb,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAACyB,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;AACAb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEZ,MAAR;AAAgBe,MAAAA,OAAO,EAAEF;AAAzB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAK,CAACC,OAAlB;AACD;AACF,CAPM;AAQP,OAAO,MAAMQ,UAAU,GAAID,EAAD,IAAQ,MAAOf,QAAP,IAAoB;AACpD,MAAI;AACF,UAAMX,GAAG,CAAC2B,UAAJ,CAAeD,EAAf,CAAN;AACAf,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEV,MAAR;AAAgBa,MAAAA,OAAO,EAAES;AAAzB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACVhB,IAAAA,OAAO,CAACC,GAAR,CAAYe,CAAZ;AACD;AACF,CAPM;AAQP,OAAO,MAAMC,QAAQ,GAAIH,EAAD,IAAQ,MAAOf,QAAP,IAAoB;AAClD,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMf,GAAG,CAAC6B,QAAJ,CAAaH,EAAb,CAAvB;AACAf,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAET,IAAR;AAAcY,MAAAA,OAAO,EAAEF;AAAvB,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdN,IAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACD;AACF,CAPM","sourcesContent":["import * as api from \"../api\";\r\nimport {\r\n  FETCH_ALL,\r\n  UPDATE,\r\n  CREATE,\r\n  DELETE,\r\n  LIKE,\r\n  FETCH_BY_SEARCH,\r\n  START_LOADING,\r\n  END_LOADING,\r\n} from \"../constants/actionTypes\";\r\nexport const getPosts = (page) => async (dispatch) => {\r\n  console.log(\"actions/posts.js: getPosts()\");\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const { data } = await api.fetchPosts(page);\r\n    dispatch({ type: FETCH_ALL, payload: data });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: START_LOADING });\r\n    const {\r\n      data: { data },\r\n    } = await api.fetchPostsBySearch(searchQuery);\r\n    dispatch({ type: FETCH_BY_SEARCH, payload: data });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const createPost = (post) => async (dispatch) => {\r\n  console.log(\"actions/posts.js: createPost()\");\r\n  dispatch({ type: START_LOADING });\r\n  try {\r\n    const { data } = await api.createPost(post);\r\n\r\n    dispatch({ type: CREATE, payload: data });\r\n    dispatch({ type: END_LOADING });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n    dispatch({ type: UPDATE, payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await api.deletePost(id);\r\n    dispatch({ type: DELETE, payload: id });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\nexport const likePost = (id) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.likePost(id);\r\n    dispatch({ type: LIKE, payload: data });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}